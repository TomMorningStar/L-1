{"mappings":"AAAA,iGAAiG;AAEjG,SAAS,gBAAgB,UAAU;IACjC,IAAI,QAAQ;IAEZ,SAAS;QACP,MAAM,OAAO,UAAU,CAAC,MAAM;QAE9B,IAAI,SAAS,KAAK;YAChB,SAAS;YACT,OAAO;QACT;QAEA,IAAI,SAAS,KAAK;YAChB,SAAS;YACT,OAAO;QACT;QAEA,IAAI,SAAS,KAAK;YAChB,SAAS;YACT,OAAO;QACT;QAEA,IAAI,SAAS,KAAK;YAChB,MAAM,QAAQ,EAAE;YAChB,MAAO,UAAU,CAAC,MAAM,KAAK,IAC3B;YAEF,MAAM,QAAQ,WAAW,MAAM,OAAO,QAAQ,aAAa;YAC3D;YACA,OAAO;QACT;QAEA,IAAI,SAAS,KAAK;YAChB,MAAM,MAAM,CAAC;YACb;YACA,MAAO,UAAU,CAAC,MAAM,KAAK,IAAK;gBAChC,MAAM,MAAM;gBACZ,SAAS,aAAa;gBACtB,MAAM,QAAQ;gBACd,GAAG,CAAC,IAAI,GAAG;gBACX,IAAI,UAAU,CAAC,MAAM,KAAK,KACxB;YAEJ;YACA;YACA,OAAO;QACT;QAEA,IAAI,SAAS,KAAK;YAChB,MAAM,MAAM,EAAE;YACd;YACA,MAAO,UAAU,CAAC,MAAM,KAAK,IAAK;gBAChC,IAAI,KAAK;gBACT,IAAI,UAAU,CAAC,MAAM,KAAK,KACxB;YAEJ;YACA;YACA,OAAO;QACT;QAEA,MAAM,QAAQ;QACd,MACE,UAAU,CAAC,MAAM,KAAK,OACtB,UAAU,CAAC,MAAM,KAAK,OACtB,UAAU,CAAC,MAAM,KAAK,OACtB,UAAU,CAAC,MAAM,KAAK,UAEtB;QAEF,MAAM,SAAS,WAAW,MAAM,OAAO,OAAO;QAC9C,OAAO,WAAW;IACpB;IAEA,OAAO;AACT;AAGA,MAAM,aAAa;AAEnB,QAAQ,IAAI,gBAAgB,cAAc,wGAAwG;AAClJ,QAAQ,IAAI,KAAK,MAAM,cAAc,wGAAwG","sources":["src/1-10/jsonParse_10/jsonParse_10.js"],"sourcesContent":["// Реализовать функцию конвертации строки в JSON со всеми необходимыми проверками и валидациями. \r\n\r\nfunction customJSONParse(jsonString) {\r\n  let index = 0;\r\n\r\n  function parseValue() {\r\n    const char = jsonString[index];\r\n\r\n    if (char === 't') { // true\r\n      index += 4;\r\n      return true;\r\n    }\r\n\r\n    if (char === 'f') { // false\r\n      index += 5;\r\n      return false;\r\n    }\r\n\r\n    if (char === 'n') { // null\r\n      index += 4;\r\n      return null;\r\n    }\r\n\r\n    if (char === '\"') { // string\r\n      const start = ++index;\r\n      while (jsonString[index] !== '\"') { // Skip string\r\n        index++;\r\n      }\r\n      const value = jsonString.slice(start, index); // Get string\r\n      index++;\r\n      return value;\r\n    }\r\n\r\n    if (char === '{') {\r\n      const obj = {};\r\n      index++;\r\n      while (jsonString[index] !== '}') {\r\n        const key = parseValue();\r\n        index++; // Skip colon\r\n        const value = parseValue();\r\n        obj[key] = value;\r\n        if (jsonString[index] === ',') {\r\n          index++;\r\n        }\r\n      }\r\n      index++;\r\n      return obj;\r\n    }\r\n\r\n    if (char === '[') {\r\n      const arr = [];\r\n      index++;\r\n      while (jsonString[index] !== ']') {\r\n        arr.push(parseValue());\r\n        if (jsonString[index] === ',') {\r\n          index++;\r\n        }\r\n      }\r\n      index++;\r\n      return arr;\r\n    }\r\n\r\n    const start = index;\r\n    while (\r\n      jsonString[index] !== ',' &&\r\n      jsonString[index] !== ']' &&\r\n      jsonString[index] !== '}' &&\r\n      jsonString[index] !== undefined\r\n    ) {\r\n      index++;\r\n    }\r\n    const numStr = jsonString.slice(start, index).trim();\r\n    return parseFloat(numStr);\r\n  }\r\n\r\n  return parseValue();\r\n}\r\n\r\n\r\nconst jsonString = '{\"title\":\"Совещание\",\"occupiedBy\":[{\"name\":\"Иванов\"},{\"name\":\"Петров\"}],\"place\":{\"number\":23}}';\r\n\r\nconsole.log(customJSONParse(jsonString)); // { title: 'Совещание', occupiedBy: [ { name: 'Иванов' }, { name: 'Петров' } ], place: { number: 23 } }\r\nconsole.log(JSON.parse(jsonString)); // { title: 'Совещание', occupiedBy: [ { name: 'Иванов' }, { name: 'Петров' } ], place: { number: 23 } }\r\n"],"names":[],"version":3,"file":"jsonParse.5be58759.js.map","sourceRoot":"/__parcel_source_root/"}